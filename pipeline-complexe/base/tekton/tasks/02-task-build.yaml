---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-scan
spec:
  description: >-
    This task stands for building and scanning images. Buildah used for containter build and
    trivy for image scanning. To let trivy scan images this task uses Docker container sidecar
  params:
  - name: TRIVY-IMAGE
    default: ghcr.io/aquasecurity/trivy:latest
    type: string
  - name: IMAGE-REGISTRY-URL
    description: Target Image Registry URL
    default: image-registry.openshift-image-registry.svc:5000
  - name: GIT-IMAGE
    description: Image with git tools
    default: registry.redhat.io/openshift-pipelines-tech-preview/pipelines-git-init-rhel8@sha256:7e18e13a94c9c82e369274984500401e27684d3565393cf6ed2bad55f2d751bc
  - name: out-image-name
    description: Reference of the image buildah will produce.
    default: ''
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: quay.io/buildah/stable
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: overlay
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images.
    type: string
    default: ""
  - name: subdirectory
    type: string
    default: ""
  workspaces:
  - name: source
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:

# Build docker image
  - name: build
    image: $(params.BUILDER_IMAGE)
    #image: docker
    workingDir: $(workspaces.source.path)/$(params.subdirectory)
    script: |
      buildah bud --tls-verify=$(inputs.params.TLSVERIFY) --format=docker -f $(inputs.params.DOCKERFILE) -t image4scan:$(params.out-image-name) $(params.CONTEXT)
      buildah push image4scan:$(params.out-image-name) docker-daemon:image4scan:$(params.out-image-name)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    - mountPath: /var/run/
      name: dind-socket
    securityContext:
      privileged: true

# Scan built image with trivy
  - name: scan
    image: $(params.TRIVY-IMAGE)
    command:
    - /bin/sh
    args:
    - -c
    - |
      set -e
      REGISTRY_URL=$(params.IMAGE-REGISTRY-URL)
      REGISTRY_NAMESPACE=$(context.taskRun.namespace)
      IMAGE_NAME=$(params.out-image-name)
      APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}-temp:latest"
      echo "Trivy image scanning.... $APP_IMAGE"
      # Trivy scan
      trivy --timeout 60m --exit-code 1 image4scan:$(params.out-image-name)
      # Trivy scan result processing
      my_exit_code=$?
      echo "RESULT 1:--- $my_exit_code"
      if [ ${my_exit_code} == 1 ]; then
          echo "Image scanning failed. Some vulnerabilities found"
          exit 1;
      else
          echo "Image is scanned Successfully. No vulnerabilities found"
      fi;
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /var/run/
      name: dind-socket
    workingDir: $(workspaces.source.path)

# Push image into repository
  - name: push
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        image4scan:$(params.out-image-name) \
        docker://$(params.IMAGE-REGISTRY-URL)/$(context.taskRun.namespace)/$(params.out-image-name)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true

# Sidecar with Docker
  sidecars:
  - image: docker:18.05-dind
    name: server
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket

# Mounts
  volumes:
  - name: dind-storage
    emptyDir: {}
  - name: dind-socket
    emptyDir: {}
  - name: varlibcontainers
    emptyDir: {}